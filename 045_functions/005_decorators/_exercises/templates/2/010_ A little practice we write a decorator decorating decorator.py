# # -*- coding: utf-8 -*-

# ___ decorator_with_args decorator_to_enhance
#     """
#     Эта функция задумывается КАК декоратор и ДЛЯ декораторов.
#     Она должна декорировать другую функцию, которая должна быть декоратором.
#     Лучше выпейте чашку кофе.
#     Она даёт возможность любому декоратору принимать произвольные аргументы,
#     избавляя Вас от головной боли о том, как же это делается, каждый раз, когда этот функционал необходим.
#     """
#
#     # Мы используем тот же трюк, который мы использовали для передачи аргументов:
# ___ decorator_maker _a_ __k_
#         # создадим на лету декоратор, который принимает как аргумент только
#         # функцию, но сохраняет все аргументы, переданные своему "создателю"
# ___ decorator_wrapper func
#             # Мы возвращаем то, что вернёт нам изначальный декоратор, который, в свою очередь
#             # ПРОСТО ФУНКЦИЯ (возвращающая функцию).
#             # Единственная ловушка в том, что этот декоратор должен быть именно такого
#             # decorator(func, *args, **kwargs)
#             # вида, иначе ничего не сработает
#             r_ d00_t0_e00 f00 a... k...
#
#         r_ d00_wr00
#
#     r_ d00_m00
#
#
# # Мы создаём функцию, которую будем использовать как декоратор и декорируем её :-)
# # Не стоит забывать, что она должна иметь вид "decorator(func, *args, **kwargs)"
# _d000
# ___ decorated_decorator f00 _a__ __k__
# ___ wrapper function_arg1 function_arg2
#         print Мне тут передали...:*_ a__ k__
#         r_ f00 f00_ f00_
#
#     r_ w_
#
#
# # Теперь декорируем любую нужную функцию нашим новеньким, ещё блестящим декоратором:
#
# _d00_d00 42 404 1024
# ___ decorated_function function_arg1 function_arg2
#     print Привет*; f00_01, f00_02
#
#
# d.... Вселенная и*; всё прочее*
# # выведет:
# # Мне тут передали...: (42, 404, 1024) {}
# # Привет Вселенная и всё прочее
#
# # Уфффффф!
