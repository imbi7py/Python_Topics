# # Декоратор — это функция, которая позволяет обернуть другую функцию для расширения её
# # функциональности без непосредственного изменения её кода.
#
# ___ decorator_function func
#     ___ wrapper
#         print Функция-обёртка!
#         print Оборачиваемая функция: ||';f___ func
#         print Выполняем обёрнутую функцию...
#         func__
#         print Выходим из обёртки
#     r_ w00000
#
# # Здесь decorator_function() является функцией-декоратором. Как вы могли заметить,
# # она является функцией высшего порядка, так как принимает функцию в качестве аргумента, а также возвращает функцию.
# # Внутри decorator_function() мы определили другую функцию, обёртку, так сказать, которая обёртывает функцию-аргумент
# # и затем изменяет её поведение. Декоратор возвращает эту обёртку.
#
# _d0000_f0000
# ___ hello_world
#     print Hello world!
#
# hello_world__
#
# #  Просто добавив @decorator_function перед определением функции hello_world(), мы модифицировали её поведение.
# #  Однако как вы уже могли догадаться, выражение с @ является всего лишь синтаксическим сахаром
# #  для hello_world = decorator_function(hello_world).
# #
# # Иными словами, выражение @decorator_function вызывает decorator_function() с hello_world в качестве аргумента
# # и присваивает имени hello_world возвращаемую функцию.
#
# ___ benchmark func
#     im___ ti00
#
#     ___ wrapper
#         start _ t00.t00__
#         func__
#         end _ t000.t000__
#         print |*| Время выполнения: || секунд.*;f___ end - start
#
#     r_ wr___
#
#
# _b___
# ___ fetch_webpage
#     im___ req___
#     webpage _ req00.g00 https://google.com
#
#
# f000_w000__