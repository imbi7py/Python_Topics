#!/usr/bin/python3
"""
In a network of nodes, each node i is directly connected to another node j if
and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are
directly connected and at least one of those two nodes is infected by malware,
both nodes will be infected by malware.  This spread of malware will continue
until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the
entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed,
would minimize M(initial).  If multiple nodes could be removed to minimize
M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may
still be infected later as a result of the malware spread.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

Note:
1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length
"""
from typing ______ List
from collections ______ defaultdict


class DisjointSet:
    ___ __init__(self
        self.pi = {}

    ___ union(self, x, y
        pi_x = self.find(x)
        pi_y = self.find(y)
        self.pi[pi_x] = pi_y

    ___ find(self, x
        __ x not in self.pi:
            self.pi[x] = x
        __ self.pi[x] != x:
            self.pi[x] = self.find(self.pi[x])
        r_ self.pi[x]


class Solution:
    ___ minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        """
        DisjointSet. But how to use DisjointSet?

        Ensure each component, the element points to a common ancestor.
        The ancestor uniquely identify the component

        Each component has size. If there are only one malware in the component,
        then the component can be sanitized.
        """
        ds = DisjointSet()
        n = le.(graph)  # nbr matrix
        for i in range(n
            for j in range(n
                __ graph[i][j] __ 1:
                    ds.union(i, j)

        counts = defaultdict(int)  # count of element in the component
        for i in range(n
            counts[ds.find(i)] += 1

        malware_counts = defaultdict(int)
        for i in initial:
            malware_counts[ds.find(i)] += 1

        max_i = min(initial)
        for i in initial:
            pi = ds.find(i)
            __ malware_counts[pi] __ 1:
                max_count = counts[ds.find(max_i)]
                __ max_count < counts[pi]:
                    max_i = i
                ____ max_count __ counts[pi] and max_i > i:
                    max_i = i

        r_ max_i


__ __name__ __ "__main__":
    assert Solution().minMalwareSpread([[1,1,0],[1,1,0],[0,0,1]], [0,1]) __ 0
